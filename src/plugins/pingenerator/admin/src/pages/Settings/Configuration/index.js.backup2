import React, { useState, useEffect, useRef } from "react";
import {
  Typography,
  DatePicker,
  Box,
  Breadcrumbs,
  Crumb,
  Button,
  BaseHeaderLayout,
  ContentLayout,
  Field,
  FieldLabel,
  FieldHint,
  FieldError,
  FieldInput,
  FieldAction,
  Flex,
  HeaderLayout,
  Layout,
} from "@strapi/design-system";
import { Check } from "@strapi/icons";
import MediaLib from "../../../components/MediaLib/index.jsx";

import useConfig from "../../../components/hooks/useConfig.js";
import { imageToPinOnUrl } from "../../../../../server/config/index.js";
import { AnErrorOccurred } from "@strapi/helper-plugin";
// import { Config, UpdateConfig } from "../../../../../../../../types/generated/types.ts";
// import { Config, UpdateConfig } from "../../../../../types";
// import { Config, UpdateConfig } from "../../../../../types.ts";
// import("../../../../../types.d.ts").Config;
// import("../../../../../types.d.ts").UpdateConfig;

export default function Configuration() {
  const ref = useRef(null);

  const [saveConfig, setSaveConfig] = useState();

  const [inputFields, setInputFields] = useState();

  const [unsavedChanges, setUnsavedChanges] = useState(false);

  let newConfig = imageToPinOnUrl;

  const config = useConfig(saveConfig);
  console.log("saveConfig => ", saveConfig);
  console.log("config !!! => ", config);

  useEffect(() => {
    if (!!config) {
      setInputFields(config);
    }
  }, [config]);

  useEffect(() => {
    if (!inputFields || !config) return;

    console.log("Object.entries(inputFields) => ", Object.entries(inputFields));
    console.log("config => ", config);

    // const inputFieldChanged = Object.entries(inputFields).some(
    //   ([key, value]) => value !== config[key as keyof Config]
    // );
    const inputFieldChanged = () => {
      console.log("inputFieldChanged");
      return {};
    };

    setUnsavedChanges(inputFieldChanged);
  }, [inputFields]);

  const onSave = () => {
    console.log("inputFields before => ", inputFields);
    console.log("ref => ", ref.current.currentSrc);
    if (ref.current.currentSrc) {
      setInputFields(ref.current.currentSrc);
      setUnsavedChanges(true);
      setSaveConfig(inputFields);
    }

    console.log("inputFields after => ", inputFields);

    
  };

  const [isOpen, setIsOpen] = useState(false);
  const [selectedAssets, setSelectedAssets] = useState([]);

  const handleToggle = () => {
    setIsOpen(!isOpen);
  };

  const handleAssetsChange = (assets) => {
    console.log("assets => ", assets);
    setSelectedAssets(assets);
  };

  return (
    <>
      <Box>
        <BaseHeaderLayout
          title="Pin Generator"
          subtitle="Configuration de la carte à épingler"
          as="h2"
          primaryAction={
            <Button
              startIcon={<Check />}
              // loading={config === undefined}
              disabled={!unsavedChanges}
              onClick={onSave}
            >
              Save
            </Button>
          }
        />
      </Box>
      <Box
        paddingTop={4}
        paddingBottom={4}
        marginTop={1}
        marginLeft={10}
        marginRight={8}
        background="neutral0"
        shadow="filterShadow"
      >
        <ContentLayout>
          <Field
            name="imgfile"
            hint="Charger l'image sur laquelle les microfictions seront épinglées. L'image de la carte doit faire une largeur minimum de 1000px"
          >
            <button onClick={handleToggle}>Changer la carte</button>
            <MediaLib
              isOpen={isOpen}
              onChange={handleAssetsChange}
              onToggle={handleToggle}
            />
            <FieldHint />
            {/* Display selected assets */}
            {selectedAssets.map((asset) => (
              <div key={asset.url}>
                <img
                  ref={ref}
                  src={asset.url}
                  alt={asset.alt}
                  width="100%"
                  height="auto"
                />
              </div>
            ))}
          </Field>
        </ContentLayout>
      </Box>

      {/* <Box
        paddingTop={4}
        paddingBottom={4}
        marginTop={8}
        marginLeft={10}
        marginRight={8}
        background="neutral0"
        shadow="filterShadow"
      >
        <ContentLayout paddingTop={8} background="neutral300">
          <Field name="imgfile" hint="Charger l'image de l'épingle">
            <button onClick={handleToggle}>Changer l'épingle</button>
            <MediaLib
              isOpen={isOpen}
              onChange={handleAssetsChange}
              onToggle={handleToggle}
            />
            <FieldHint />
            {selectedAssets.map((asset) => (
              <div key={asset.url}>
                <img
                  src={asset.url}
                  alt={asset.alt}
                  width="100%"
                  height="auto"
                />
              </div>
            ))}
          </Field>
        </ContentLayout>
      </Box> */}
    </>
  );
}
